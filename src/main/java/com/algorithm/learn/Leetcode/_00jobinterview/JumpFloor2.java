package com.algorithm.learn.Leetcode._00jobinterview;

/**
 * Created by Administrator on 2020/2/1.
 * 一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。
 * 正常分析法：
 * 1.假设n>=2，第一步有n种跳法：跳1级、跳2级、到跳n级
 * (1)跳1级，剩下n-1级，则剩下跳法是f(n-1)
 * (2)跳2级，剩下n-2级，则剩下跳法是f(n-2)
 * ......
 * (3)跳n-1级，剩下1级，则剩下跳法是f(1)
 * (4)跳n级，剩下0级，则剩下跳法是f(0)
 * 2.所以在n>=2的情况下： f(n)=f(n-1)+f(n-2)+...+f(1)
 * 3.因为f(n-1)=f(n-2)+f(n-3)+...+f(1) 所以f(n)=2*f(n-1) 又f(1)=1,所以可得f(n)=2^(number-1)
 */
public class JumpFloor2 {

    /**
     * java中有三种移位运算符：
     (1)“<<”: 左移运算符，等同于乘2的n次方
     (2)“>>”: 右移运算符，等同于除2的n次方
     (3)“>>>”: 无符号右移运算符，不管移动前最高位是0还是1，右移后左侧产生的空位部分都以0来填充。
        与>>类似。 例： int a = 16; int b = a << 2;//左移2，等同于16 * 2的2次方，也就是16 * 4
        int c = a >> 2;//右移2，等同于16 / 2的2次方，也就是16 / 4
     * @param n
     * @return
     */
    public int jumpfloor2(int n){
        return 1<< --n;
    }
}
